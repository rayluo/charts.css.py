__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1625547597397, "charts.css": [".py", "\n\n\n__version__=\"0.4.0\"\n\n\ndef transpose(matrix):\n ''\n\n\n\n\n\n \n return list(zip(*matrix))\n \n \nclass Legend:\n _shape=\"\"\n def __init__(self,legends:list,inline=None ):\n  self._legends=legends\n  self._inline=inline\n def __str__(self):\n  return \"<ul class='charts-css legend {} {}'>{}</ul>\".format(\n  self._shape,\n  \"legend-inline\"if self._inline else \"\",\n  \"\".join(\"<li>{}</li>\".format(legend)for legend in self._legends))\n  \nclass LegendCircle(Legend):\n _shape=\"legend-circle\"\n \nclass LegendEllipse(Legend):\n _shape=\"legend-ellipse\"\n \nclass LegendSquare(Legend):\n _shape=\"legend-square\"\n \nclass LegendRectangle(Legend):\n _shape=\"legend-rectangle\"\n \nclass LegendRhombus(Legend):\n _shape=\"legend-rhombus\"\n \nclass LegendLine(Legend):\n _shape=\"legend-line\"\n \nSHOW_SECONDARY_AXES=range(11)\nDATA_SPACING=range(21)\nDATASETS_SPACING=range(21)\n\ndef _chart(\nrows:list,\n_type,\n*,\nheaders_in_first_row=False ,\nheaders_in_first_column=False ,\nlegend=None ,\nlegend_inline=False ,\n\n_series_upper_bound=None ,\n\nvalue_displayer=None ,\nvalue_converter=None ,\nstacked=False ,\n\nheading:str=None ,\nhide_label=None ,\nhide_data=False ,\nshow_data_on_hover=False ,\nreverse=False ,\n\n\nreverse_data=False ,\nreverse_datasets=False ,\n\n\nshow_data_axes=False ,\nshow_secondary_axes=None ,\n\n\ndata_spacing=None ,\ndatasets_spacing=None ,\n\ntooltip_builder=None ,\n\nclasses=None ,\n\n\n)->str:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n assert rows\n if not (rows and len(rows)>(1 if headers_in_first_row else 0)):\n  raise ValueError(\"rows (excluding header row) needs to contain numeric content.\")\n if show_secondary_axes and show_secondary_axes not in SHOW_SECONDARY_AXES:\n  raise ValueError(\n  \"show_secondary_axes should range in {}\".format(SHOW_SECONDARY_AXES))\n if data_spacing and data_spacing not in DATA_SPACING:\n  raise ValueError(\n  \"data_spacing should range in {}\".format(DATA_SPACING))\n if datasets_spacing and datasets_spacing not in DATASETS_SPACING:\n  raise ValueError(\n  \"datasets_spacing should range in {}\".format(DATASETS_SPACING))\n  \n classes=list(filter(None ,[\n \"charts-css\",\n _type,\n \"show-labels\",\n \"show-heading\"if heading else None ,\n hide_data and \"hide-data\",\n \"show-data-on-hover\"if show_data_on_hover else None ,\n \"reverse\"if reverse else None ,\n \"show-primary-axis\",\n \"show-data-axes\"if show_data_axes else None ,\n \n \"show-{}-secondary-axes\".format(show_secondary_axes)if show_secondary_axes else None ,\n \"data-spacing-{}\".format(data_spacing)if data_spacing else None ,\n \"datasets-spacing-{}\".format(datasets_spacing)if datasets_spacing else None ,\n \"reverse-data\"if reverse_data else None ,\n \"reverse-datasets\"if reverse_datasets else None ,\n \"stacked\"if stacked else None ,\n ]+(classes or [])))\n \n def as_is(raw):\n  return raw\n  \n def cell2dict(raw):\n  return raw if isinstance(raw,dict)else {\"value\":raw}\n normalized_rows=[list(\n map(cell2dict,row)\n )for row in rows]\n padding=0.2 if _type ==\"line\"else 0\n \n def numeric_values_in_a_row(row,value_converter=value_converter,as_is=as_is):\n  _data_starts_at_row=(\n  \n  1 if headers_in_first_column else 0)\n  values=[\n  (value_converter or as_is)(cell[\"value\"])\n  for cell in row[_data_starts_at_row:]]\n  if not values:\n   raise ValueError(\"Inputed rows should contain at least one numeric column\")\n  for v in values:\n   if not isinstance(v,(int,float)):\n    raise ValueError(\n    \"Cell ({}) needs to be either a numeric value, \"\n    \"or converted to a numeric value by value_converter, \"\n    \"or declared as a row/column header.\".format(repr(v)))\n  return values\n  \n first_data_row=1 if headers_in_first_row else 0\n if len(numeric_values_in_a_row(normalized_rows[first_data_row]))>1:\n  classes.append(\"multiple\")\n  \n global_upper_bound=max(\n (sum if stacked else max)(numeric_values_in_a_row(row))\n for row in normalized_rows[first_data_row:]\n )+padding\n \n \n table_rows=[]\n previous_row=None\n for y,row in enumerate(normalized_rows[first_data_row:]):\n  denominator=_series_upper_bound(\n  numeric_values_in_a_row(row)\n  )if _series_upper_bound else global_upper_bound\n  \n  cells=[(\n  \"\"\"      <th scope=\"row\"{classes}>{value}</th>\"\"\".format(\n  value=cell[\"value\"],\n  classes=' class=\"hide-label\"'\n  if hide_label and hide_label(y,cell[\"value\"])else \"\",\n  )\n  if x ==0 and headers_in_first_column else\n  \"\"\"      <td style=\"{start}--size:calc({value}/{denominator});\">\n        <span class=\"data\">{data}</span> {tooltip}\n      </td>\"\"\".format(\n  start=\"--start:calc({value}/{denominator});\".format(\n  value=previous_row[x][\"value\"]if previous_row else cell[\"value\"],\n  denominator=denominator,\n  )if _type in (\"line\",\"area\")else \"\",\n  value=cell[\"value\"],\n  denominator=denominator,\n  data=cell.get(\"data\",(value_displayer or as_is)(cell[\"value\"])),\n  tooltip=_get_tooltip(cell,x,y,row,tooltip_builder),\n  )\n  )for x,cell in enumerate(row)]\n  table_rows.append(\"    <tr>\\n{}\\n    </tr>\".format(\"\\n\".join(cells)))\n  previous_row=row\n  \n table=\"\"\"<table class='{classes}'>\n  {heading}\n{thead}\n  <tbody>\n{rows}\n  </tbody>\n</table>\n\"\"\".format(\n classes=\" \".join(classes),\n heading=\"<caption>{}</caption>\".format(heading)if heading else \"\",\n thead=\"\"\"  <thead>\n    <tr>\n      {}\n    </tr>\n  </thead>\"\"\".format(\n \"\\n      \".join('<th scope=\"col\">{}</th>'.format(h)for h in rows[0])\n )if headers_in_first_row else \"\",\n rows=\"\\n\".join(table_rows),\n )\n return \"{table}{legend}\".format(\n table=table,\n legend=legend(rows[0][first_data_row:],inline=legend_inline),\n )if legend and headers_in_first_row else table\n \ndef _get_tooltip(cell,column_number,row_number,row,tooltip_builder):\n assert isinstance(cell,dict),\"cell should have been normalized into a dict\"\n template='<span class=\"tooltip\">{}</span>'\n if \"tooltip\"in cell:\n  return template.format(cell[\"tooltip\"])\n if tooltip_builder:\n  return template.format(tooltip_builder(\n  value=cell[\"value\"],\n  label=row[0][\"value\"],\n  column_number=column_number,\n  row_number=row_number,\n  row=row,\n  ))\n return \"\"\n \n \ndef bar(rows,*,stacked=False ,percentage=False ,**kwargs)->str:\n return _chart(\n rows,\n \"bar\",stacked=stacked,_series_upper_bound=sum if percentage else None ,\n **kwargs)\n \ndef column(rows,*,stacked=False ,percentage=False ,**kwargs)->str:\n return _chart(\n rows,\n \"column\",stacked=stacked,_series_upper_bound=sum if percentage else None ,\n **kwargs)\n \ndef area(rows,**kwargs)->str:\n return _chart(rows,\"area\",**kwargs)\n \ndef line(rows,data_spacing=None ,datasets_spacing=None ,**kwargs)->str:\n if data_spacing or datasets_spacing:\n  raise ValueError(\"data_spacing or datasets_spacing would break line into segments\")\n return _chart(rows,\"line\",**kwargs)\n \n \nLAYOUT=\"\"\"\n#${wrapper_id} {\n  display: grid;\n  align-items: center;\n  justify-items: center;\n  background-color: #eee;\n\n  height: calc(100vh - 1em);\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar_left loft sidebar_right\"\n    \"sidebar_left main sidebar_right\"\n    \"sidebar_left basement sidebar_right\"\n    \"footer footer footer\";\n  grid-template-columns: auto 1fr auto;\n  grid-template-rows: auto auto 1fr auto auto;\n}\n\"\"\"\n\nARRANGEMENT=\"\"\"\ntable.charts-css {grid-area: main;}\nul.charts-css.legend {\n  grid-area: sidebar_right;\n}\n\"\"\"\n\n\ndef wrapper(*charts,wrapper_id=None ,layout=None ,arrangement=None ):\n import string\n wrapper_id=wrapper_id or \"my_chart\"\n return \"\"\"<style>{layout}{arrangement}</style>\n<div id=\"{wrapper_id}\">\n{charts}\n</div>\n\"\"\".format(\n wrapper_id=wrapper_id,\n charts=\"\\n\".join(charts),\n layout=string.Template(layout or LAYOUT).safe_substitute(wrapper_id=wrapper_id),\n arrangement=string.Template(arrangement or ARRANGEMENT).safe_substitute(wrapper_id=wrapper_id),\n )\n \nSTYLESHEET='<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/charts.css/dist/charts.min.css\">'\n", ["string"]], "charts": [".py", "", [], 1]}
__BRYTHON__.update_VFS(scripts)
